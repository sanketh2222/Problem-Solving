Search in a rotated sorted array:

Problem Description
An array sorted in ascending order is rotated about a pivot unknown to you. Such an array is referred to as a rotated sorted array. For example : [1,2,3,4,5] is a sorted array while [3,4,5,1,2] is a rotated sorted array. The user has lost some values and wants to search for a value in the rotated sorted array given to him. If the value is present, return the index in which it is stored ( 0 based indexing) , otherwise if not found return a -1.

Input format
First line will have a single integer N denoting the size of the array.

Second line will contain N space separated integers.

Third line will contain a single integer Q denoting the number of targets to be searched..

Next Q lines will have a single integer,X in each line denoting the target value. You have to search for each of these target values in turn.

Output format
One line per output for each target search, with -1 or the index at which the integer is found.

Function Definition
Complete the function search in the code editor for a language of your choice.

search has the following parameters :

nums : An array of numbers having its values in a rotated sorted order

target : An integer representing the number to be searched in nums

search returns :

int : An integer denoting the index of the target to be searched. If target not present returns -1.

Constraints
1 <= N <= 10^6 where N denotes the size of the input array

1 <= A[i] <= 10^9 where A[i] denotes the ith element of the input array

1 <= Q <= 10^6 where Q denotes the number of targets to be searched

1 <= X <= 10^9 where X denotes the target element to be search

Sample Input 1
7

4 5 6 9 10 2 3

2

3

8

Sample Output 1
6

-1

Explanation 1
The element 3 is found in the array at index 6. Element 8 is not found in the array, thus -1.

Sample Input 2
6

5 6 8 1 3 4

1

0

Sample Output 2
-1

Explanation 2
The element 0 is not found in the array.

Vishva:: proposed Logic/Thoughts

this will lead to direct solution::



1. Since the input is a rotated sorted array we need to make benefit of this point [ start__ =a[start]  end__= a[length -1]
2. Primary aim should be to identify the pivot of the array (To Formulate:: the very integer after which the values go decreasing PS: This will also be the max value in the array , and very next index value will be the sub pivot) (store pivot = a[max] & sub_pivot = a[max +1 ] )
3. Once pivots are identified we can check if the value given to us is greater than pivot or smaller than sub_pivot Integer. Both cases return -1 simply ( Best case Time complexity O(N))
4. If either pivot/ subpivot matched return respective indices

5. Going forward if value is greater than sub_pivot and lesser than end__ then search it in sub_pivot +i indices only (use binary search so Complexity: O(Log2(N-sub_pivot index))
6. On contrary if value is lesser than pivot and greater than start__ then search it sub_pivot +i indices only (use binary search so Complexity: O(Log2(N-sub_pivot index))


